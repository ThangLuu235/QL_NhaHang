/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DAO.ConnectDB;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.Food;

/**
 *
 * @author USER
 */
public class Menu extends javax.swing.JFrame {

    final String header[] = {"FoodId", "FoodName", "Price"};
    final DefaultTableModel tb = new DefaultTableModel(header, 0);
    ConnectDB cn = new ConnectDB();
    Connection conn;
    static private int FoodID;
    static private String foodName;
    static private String note;
    static private float price;
    static private int quantity;
    static private int foodQuantity;
    private int check = 0;

    public Menu() throws ClassNotFoundException {
        initComponents();
        loadBang();
    }

//    public Vector<Food> layDSMonAn() throws SQLException {
//        int number;
//        Vector<Food> dsMonAn = new Vector<>();
//        String sql = "SELECT * FROM Food";
//        Statement st = conn.createStatement();
//        ResultSet rs = st.executeQuery(sql);
//        ResultSetMetaData metadata = rs.getMetaData();
//        number = metadata.getColumnCount();
//        tb.setRowCount(0);
//        while (rs.next()) {
//            Food food = new Food();
//            food.setFoodID(rs.getInt(1));
//            food.setFoodName(rs.getString(2));
//            food.setImageURL(rs.getString(4));
//            food.setDescription(rs.getString(5));
//            food.setPrice(rs.getFloat(6));
//            food.setQuantity(rs.getInt(7));
//            dsMonAn.add(food);
//        }
//        st.close();
//        rs.close();
//        return dsMonAn;
//    }

    //Load bảng tất cả món ăn có trong nhà hàng
    public void loadBang() {
        try {
            conn = cn.getConnection();
            int number;
            Vector row;
            String sql = "SELECT FoodID, FoodName, Price FROM Food";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ResultSetMetaData metadata = rs.getMetaData();
            number = metadata.getColumnCount();
            tb.setRowCount(0);
            while (rs.next()) {
                row = new Vector();
                for (int i = 1; i <= number; i++) {
                    row.addElement(rs.getString(i));
                }
                tb.addRow(row);
                tbFood.setModel(tb);
            }
            st.close();
            rs.close();

        } catch (Exception e) {
        }
        tbFood.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (tbFood.getSelectedRow() >= 0) {
                    FoodID = (Integer.parseInt(tbFood.getValueAt(tbFood.getSelectedRow(), 0) + ""));
                    foodName = tbFood.getValueAt(tbFood.getSelectedRow(), 1) + "";
                    price = (Float.parseFloat(tbFood.getValueAt(tbFood.getSelectedRow(), 2) + ""));
                }

            }
        });
    }

    public void laySoLuongMonAn() {
        try {
            conn = cn.getConnection();
            String sql = "SELECT * FROM Food WHERE FoodID = ?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setInt(1, FoodID);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    foodQuantity = rs.getInt("Quantity");
                }
                rs.close();
            }
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbFood = new javax.swing.JTable();
        btnTimKiem = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnThemMonAn = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbFood.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbFood.setShowGrid(true);
        tbFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFoodMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbFood);

        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("MENU");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Số lượng");

        txtQuantity.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        btnThemMonAn.setText("Thêm món ăn");
        btnThemMonAn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemMonAnActionPerformed(evt);
            }
        });

        btnExit.setText("Thoát");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTimKiem)
                        .addGap(31, 31, 31)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(187, 187, 187))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel10)
                        .addGap(30, 30, 30)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnThemMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimKiem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnThemMonAn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ThemMonAn() {

        laySoLuongMonAn();
        if (tbFood.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Chọn món trước!");
            return;
        }
        quantity = Integer.parseInt(txtQuantity.getText());
        int soMonAnConLai = foodQuantity - quantity;
        if(quantity <= 0){
            JOptionPane.showMessageDialog(this, "Nhập số lượng món hợp lệ!");
            return;
        }
        if (foodQuantity == 0) {
            JOptionPane.showMessageDialog(this, "Món đã hết");
            return;
        }
        if (soMonAnConLai < 0) {
            JOptionPane.showMessageDialog(this, "Số lượng món ăn không đủ, còn lại: " + foodQuantity);
            return;
        }
        float gia = price*quantity;
        JOptionPane.showMessageDialog(this,"GIA: " + price*quantity);
        try {
            conn = cn.getConnection();
            String sql = "";
            if (Ban.orderid == 0) {
                sql = "insert into Orders (OrderDate, Total, TableID, EmployeeID, Stt) " + "values (getdate(), ?, ?, ?, ?)";
                try (PreparedStatement st1 = conn.prepareStatement(sql)) {
                    st1.setInt(1, 0);
                    st1.setInt(2, Integer.parseInt(Ban.lblMaBan.getText().substring(4)));
                    st1.setInt(3, 1);
                    st1.setInt(4, 0);
                    int rs = st1.executeUpdate();
                }
                sql = "select * from Orders";
                PreparedStatement st = conn.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    Ban.orderid = rs.getInt("OrderID");
                }
                sql = "update Tables set Status = 1 where TableID = ?";
                try (PreparedStatement st2 = conn.prepareStatement(sql)) {
                    st2.setInt(1, Integer.parseInt(Ban.lblMaBan.getText().substring(4)));
                    int rs1 = st2.executeUpdate();
                    System.out.println("Sau khi them: " + Integer.parseInt(Ban.lblMaBan.getText().substring(4)));
                }
                st.close();
                rs.close();
            }
            sql = "insert into OrderDetails (OrderID, FoodID, FoodName, Quantity, Price, TableID) " + "values (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement statement = conn.prepareStatement(sql)) {
                statement.setInt(1, Ban.orderid);
                statement.setInt(2, FoodID);
                statement.setString(3, foodName);
                statement.setInt(4, quantity);
                statement.setFloat(5, gia);
                statement.setInt(6, Integer.parseInt(Ban.lblMaBan.getText().substring(4)));
                int rs = statement.executeUpdate();
                //rs.close();
            }
            sql = "update Food set Quantity = ? where FoodID = ?";
            try (PreparedStatement st2 = conn.prepareStatement(sql)) {
                st2.setInt(1, soMonAnConLai);
                st2.setInt(2, FoodID);
                int rs1 = st2.executeUpdate();
            }
            conn.close();
            JOptionPane.showMessageDialog(this, "Thêm món thành công");

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Tables.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnThemMonAnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemMonAnActionPerformed

        ThemMonAn();
    }//GEN-LAST:event_btnThemMonAnActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed

    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        //Hiển thị số lượng món ăn tương ứng khi click bất kì dòng nào trong bảng
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void tbFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFoodMouseClicked
        check++;
        try {
            int selectedRow = tbFood.getSelectedRow();
            int foodID = Integer.parseInt(tbFood.getModel().getValueAt(selectedRow, 0).toString());

            conn = cn.getConnection();
            String sql = "SELECT Quantity FROM Food WHERE FoodID=?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setInt(1, foodID);
            ResultSet rs = statement.executeQuery();

            if (rs.next()) {
                int quantity = rs.getInt("Quantity");
                txtQuantity.setText("1");
            }
            conn.close();
            rs.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbFoodMouseClicked

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Menu().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnThemMonAn;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbFood;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
